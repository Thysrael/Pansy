const int N = 512;
const int mod = 7717;
const int gg = 1 + 1;
const int ppp = 1, qqq = 2;
const int array3[4] = {1, 2, 3, 4};
const int array4[4][2] = {{4, 4}, {3, 3}, {2, 2}, {1, 1}};
int uN, vN;
int m;
int g[512][512];
int match[512];
int vis[512];

int fact[15];
int ifact[15];
int inv[15];

int var1 = 0;
int var2 = +1;
int array1[10] = {10, 7, 8, 1, 3, 2, 4, 9, 5, 6};
int array2[5][2] = {{2, 1}, {4, 3}, {6, 5}, {8, 7}, {10, 9}};
int precalifact[11] = {1, 1, 499122177, 166374059, 291154603, 856826403, 641926577, 376916469, 421456191, 712324701, 370705776}; // when mod 998244353

int x[11] = {0, 1, 2, 4, 3, 5, 8, 10, 7, 9, 6};
int y[11] = {0, 1, 6, 3, 8, 10, 5, 7, 2, 4, 9};
int mydp[10][10];


int min(int a, int b) {
    if (a < b) {
        return a;
    }
    return b;
}

int max(int a, int b) {
    if (a > b) {
        return a;
    }
    return b;
}

int dfs(int u) {
    int v;
    v = 0;
    while (v < vN) {
        if (g[u][v] && !vis[v]) {
            vis[v] = 1;
            if (match[v] == -1 || dfs(match[v])) {
                match[v] = u;
                return 1;
            }
        }
        v = v + 1;
    }
    return 0;
}

int hungary() {
    int res;
    res = 0;
    int u;
    u = 0;
    int i;
    i = 0;
    while (u < N) {
        match[u] = -1;
        u = u + 1;
    }
    u = 0;
    while (u < uN) {
        i = 0;
        while (i < N) {
            vis[i] = 0;
            i = i + 1;
        }
        if (dfs(u)) {
            res = res + 1;
        }
        u = u + 1;
    }
    return res;
}

int ksm(int a, int b) {
    int ret;
    ret = 1;
	while (b != 0) {
		if (b % 2 == 1) ret = ret * a % mod;
		a = a * a % mod;
		b = b / 2;
	}
	return ret;
}

int LCIS(int a[], int b[], int n, int dp[][10]) {
    int i;
    int j;
    i = 1;
    j = 0;
    int val;
    val = 0;
    int ans;
    ans = 0;
    while (i <= n) {
        j = 1;
        val = 0;
        while (j <= n) {
            if (a[i] == b[j]) {
                dp[i][j] = val + 1;
            }
            else {
                dp[i][j] = dp[i - 1][j];
            }
            if (b[j] < a[i]) {
                val = max(val, dp[i - 1][j]);
            }
            j = j + 1;
        }
        i = i + 1;
    }
    i = 1;
    while (i <= n) {
        ans = max(ans, dp[n][i]);
        i = i + 1;
    }
    return ans;
}

int trashfind(int a[], int tobefind, int n) {
    int i;
    i = 0;
    int flag;
    flag = 0;
    while (i < n) {
        if (a[i] == tobefind) {
            flag = 1;
            break;
        }
        i = i + 1;
        if (a[i] == 0) {
            continue;
        }
    }
    return flag;
}

// sum of (n / i)
//check
int blocksum(int n) {
    int i;
    i = 1;
    int ans;
    ans = 0;
    while (i <= n) {
        int v = n / i;
        int last = n / v;
        ans = ans + (last - i + 1) * v;
        ans = ans % mod;
        i = last + 1;
    }
    return ans;
}

//check
void init() {
    fact[0] = 1;
    fact[1] = 1;
    int i;
    i = 2;
    while (i <= 10) {
        fact[i] = fact[i - 1] * i % mod;
        i = i + 1;
    }
    // cal you mother, long long dou mei you 
    ifact[10] = ksm(fact[10], mod - 2);
    i = 9;
    while (i >= 0) {
        ifact[i] = ifact[i + 1] * (i + 1) % mod;
        i = i - 1;
    }
    inv[1] = 1;
    i = 2; 
    while (i <= 10) {
        int p;
        p = mod - mod / i;
        int pos;
        pos = mod % i;
        inv[i] = p * inv[pos] % mod;
        // inv[i] = (mod - (mod / i)) * inv[mod % i] % mod;
        i = i + 1;
    }
    return ;
}

//check
int comb(int a, int b) {
    if (a < b) return 0;
    int ret;
    ret = 1;
    int i;
    i = 1;
    int j;
    j = a;
    while (i <= b) {
        ret = ret * j % mod;
        ret = ret * inv[i] % mod;
        i = i + 1;
        j = j - 1;
    }
    return ret;
}

//check
int comb2(int a, int b) {
    if (b > a) return 0;
    int pos;
    pos = a - b;
    return fact[a] * ifact[b] % mod * ifact[pos] % mod;
}

// get the least lexicographical order
//check
// int getMin(int s[], int n) {
//     int i;
//     int j;
//     int k;
//     i = 0;
//     j = 1;
//     k = 0;
//     while (i < n && j < n) {
//         int t;
//         int pos1, pos2;
//         pos1 = (i + k) % n;
//         pos2 = (j + k) % n;
//         t = s[pos1] - s[pos2];
//         if (t == 0) {
//             k++;
//         }
//         else {
//             if (t > 0) {
//                 i = i + k + 1;
//             } else {
//                 j = j + k + 1;
//             }
//             if (i == j) {
//                 i = i + 1;
//             }
//             k = 0;
//         }
//     }
//     int ret;
//     ret = min(i, j);
//     return ret;
// }

int main() {
    printf("19373807\n");
    init();
    // int minstart;
    // minstart = getMin(array1, 10);
    int C5_3;
    C5_3 = comb(5, 3);
    int C6_4;
    C6_4 = comb2(6, 4);
    int last;
    last = trashfind(array1, 5, 10);
    int sum;
    sum = blocksum(10);
    int lcis_count;
    lcis_count = LCIS(x, y, 10, mydp);
    printf("%d\n", lcis_count);
    sum = sum + C5_3 + C6_4 + last;
    // printf("%d\n", sum);
    
    uN = getint();
    m = getint();
    vN = uN;
    int u;
    int v;
    while (m != 0) {
        u = getint();
        v = getint();
        u = u - 1;
        v = v - 1;
        g[u][v] = 1;
        m = m - 1;
    }
    int anshungary;
    anshungary = hungary();
    // printf("%d\n", anshungary);
    ;;;;;;;;;;;;;;;;;;
    {

    }


    return 0;
}